diff -rupN clean/src/applications/model/onoff-application.cc mod/src/applications/model/onoff-application.cc
--- clean/src/applications/model/onoff-application.cc	2013-11-15 22:50:31.000000000 +0100
+++ mod/src/applications/model/onoff-application.cc	2015-04-08 16:30:19.000000000 +0200
@@ -41,6 +41,8 @@
 #include "ns3/udp-socket-factory.h"
 #include "ns3/string.h"
 #include "ns3/pointer.h"
+#include <ns3/qos-tag.h>
+#include "ns3/timestamponoff.h"
 
 NS_LOG_COMPONENT_DEFINE ("OnOffApplication");
 
@@ -85,6 +87,10 @@ OnOffApplication::GetTypeId (void)
                    TypeIdValue (UdpSocketFactory::GetTypeId ()),
                    MakeTypeIdAccessor (&OnOffApplication::m_tid),
                    MakeTypeIdChecker ())
+    .AddAttribute ("AccessClass", "The access class: AC_BE, AC_VO, AC_VI, AC_BK",
+                   UintegerValue (0),
+                   MakeUintegerAccessor (&OnOffApplication::m_ac),
+                   MakeUintegerChecker<uint8_t> ())
     .AddTraceSource ("Tx", "A new packet is created and is sent",
                      MakeTraceSourceAccessor (&OnOffApplication::m_txTrace))
   ;
@@ -94,16 +100,20 @@ OnOffApplication::GetTypeId (void)
 
 OnOffApplication::OnOffApplication ()
   : m_socket (0),
+    m_ac (0),
     m_connected (false),
     m_residualBits (0),
     m_lastStartTime (Seconds (0)),
     m_totBytes (0)
+
+
 {
   NS_LOG_FUNCTION (this);
 }
 
 OnOffApplication::~OnOffApplication()
 {
+  //m_ac=0;
   NS_LOG_FUNCTION (this);
 }
 
@@ -267,6 +277,14 @@ void OnOffApplication::SendPacket ()
 
   NS_ASSERT (m_sendEvent.IsExpired ());
   Ptr<Packet> packet = Create<Packet> (m_pktSize);
+
+  TimeStampOnOff tag;
+  tag.SetTimestamp (Simulator::Now());
+  packet->AddByteTag (tag);
+
+  //QosTag qos;
+  //qos.SetTid(m_ac);
+  //packet->AddPacketTag (qos); // Priority for WiFi, see src/devices/wifi/qos-tag.h
   m_txTrace (packet);
   m_socket->Send (packet);
   m_totBytes += m_pktSize;
diff -rupN clean/src/applications/model/onoff-application.h mod/src/applications/model/onoff-application.h
--- clean/src/applications/model/onoff-application.h	2013-11-15 22:50:31.000000000 +0100
+++ mod/src/applications/model/onoff-application.h	2014-01-08 18:45:58.000000000 +0100
@@ -88,6 +88,7 @@ class OnOffApplication : public Applicat
 public:
   static TypeId GetTypeId (void);
 
+
   OnOffApplication ();
 
   virtual ~OnOffApplication();
@@ -140,6 +141,7 @@ private:
   void SendPacket ();
 
   Ptr<Socket>     m_socket;       // Associated socket
+  uint8_t 			m_ac;
   Address         m_peer;         // Peer address
   bool            m_connected;    // True if connected
   Ptr<RandomVariableStream>  m_onTime;       // rng for On Time
diff -rupN clean/src/applications/model/timestamponoff.cc mod/src/applications/model/timestamponoff.cc
--- clean/src/applications/model/timestamponoff.cc	1970-01-01 01:00:00.000000000 +0100
+++ mod/src/applications/model/timestamponoff.cc	2014-08-07 22:35:35.000000000 +0200
@@ -0,0 +1,83 @@
+/* -*- Mode: C++; c-file-style: "gnu"; indent-tabs-mode:"nill"; -*- */
+/*
+ * Copyright (c) 2012 Amir Reda
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ *Based on AeroRP 
+ *Authors: Dr/ Sherif Khatab <s.khattab@fci-cu.edu.eg>
+ *         Eng/ Amir mohamed Reda <amiralex32@gmail.com>
+*/
+
+#include "ns3/core-module.h"
+#include "ns3/timestamponoff.h"
+
+using namespace ns3;
+
+TypeId 
+TimeStampOnOff::GetTypeId (void)
+{
+  static TypeId tid = TypeId ("TimeStampOnOff")
+    .SetParent<Tag> ()
+    .AddConstructor<TimeStampOnOff> ()
+    .AddAttribute ("TimeStampOnOff",
+                   "Some momentous point in time!",
+                   EmptyAttributeValue (),
+                   MakeTimeAccessor (&TimeStampOnOff::GetTimestamp),
+                   MakeTimeChecker ())
+  ;
+  return tid;
+}
+TypeId 
+TimeStampOnOff::GetInstanceTypeId (void) const
+{
+  return GetTypeId ();
+}
+
+uint32_t 
+TimeStampOnOff::GetSerializedSize (void) const
+{
+  return 8;
+}
+void 
+TimeStampOnOff::Serialize (TagBuffer i) const
+{
+  int64_t t = m_timestamp.GetNanoSeconds ();
+  i.Write ((const uint8_t *)&t, 8);
+}
+void 
+TimeStampOnOff::Deserialize (TagBuffer i)
+{
+  int64_t t;
+  i.Read ((uint8_t *)&t, 8);
+  m_timestamp = NanoSeconds (t);
+}
+
+void
+TimeStampOnOff::SetTimestamp (Time time)
+{
+  m_timestamp = time;
+}
+Time
+TimeStampOnOff::GetTimestamp (void) const
+{
+  return m_timestamp;
+}
+
+void 
+TimeStampOnOff::Print (std::ostream &os) const
+{
+  os << "t=" << m_timestamp;
+}
+
diff -rupN clean/src/applications/model/timestamponoff.h mod/src/applications/model/timestamponoff.h
--- clean/src/applications/model/timestamponoff.h	1970-01-01 01:00:00.000000000 +0100
+++ mod/src/applications/model/timestamponoff.h	2014-08-07 22:36:33.000000000 +0200
@@ -0,0 +1,59 @@
+/* -*- Mode: C++; c-file-style: "gnu"; indent-tabs-mode:"nill"; -*- */
+/*
+ * Copyright (c) 2012 Amir Reda
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation;
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ *
+ *Based on AeroRP 
+ *Authors: Dr/ Sherif Khatab <s.khattab@fci-cu.edu.eg>
+ *         Eng/ Amir mohamed Reda <amiralex32@gmail.com>
+*/
+
+#ifndef TIME_STAMP_H
+#define TIME_STAMP_H
+
+#include "ns3/core-module.h"
+#include "ns3/type-id.h"
+#include "ns3/nstime.h"
+#include "ns3/tag.h"
+#include "ns3/tag-buffer.h"
+
+
+
+namespace ns3 {
+
+class TimeStampOnOff : public Tag {
+public:
+  static TypeId GetTypeId (void);
+  virtual TypeId GetInstanceTypeId (void) const;
+
+  virtual uint32_t GetSerializedSize (void) const;
+  virtual void Serialize (TagBuffer i) const;
+  virtual void Deserialize (TagBuffer i);
+
+  // these are our accessors to our tag structure
+  void SetTimestamp (Time time);
+  Time GetTimestamp (void) const;
+
+  void Print (std::ostream &os) const;
+
+private:
+  Time m_timestamp;
+
+  // end class Timestamp
+};
+
+};
+
+#endif /* TIME_STAMP_H*/
